// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v4.24.4
// source: category.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { File } from "./common";
import { Empty } from "./google/protobuf/empty";
import { PropertyGroupPreview } from "./prop_group";
import { TransData } from "./trans";

export const protobufPackage = "category";

export interface Category {
  id: number;
  url: string;
  title: TransData;
  icon: string;
  iconId: string;
  isPublic: boolean;
  comment: string;
  createdAt: Date;
  updatedAt: Date;
  /** products: ProductPreviewI[] | null */
  propertyGroups: PropertyGroupPreview[];
}

export interface CategoryPreview {
  id: number;
  url: string;
  title: TransData;
  icon: string;
  iconId: string;
  isPublic: boolean;
  comment: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface CategoryCU {
  url: string;
  title: TransData;
  isPublic: boolean;
  icon?: File | undefined;
  propertyGroups: number[];
  comment: string;
}

export interface CategoryUpdateParams {
  id: number;
  data: CategoryCU;
}

export interface CategoryPrivateList {
  items: CategoryPreview[];
}

export interface CategorySearchParams {
  url: string;
}

export const CATEGORY_PACKAGE_NAME = "category";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface CategoryServiceClient {
  createCategory(request: CategoryCU): Observable<CategoryPreview>;

  updateCategory(request: CategoryUpdateParams): Observable<Empty>;

  getCategoryPrivateList(request: Empty): Observable<CategoryPrivateList>;

  getCategoryPrivate(request: CategorySearchParams): Observable<Category>;
}

export interface CategoryServiceController {
  createCategory(request: CategoryCU): Promise<CategoryPreview> | Observable<CategoryPreview> | CategoryPreview;

  updateCategory(request: CategoryUpdateParams): void;

  getCategoryPrivateList(
    request: Empty,
  ): Promise<CategoryPrivateList> | Observable<CategoryPrivateList> | CategoryPrivateList;

  getCategoryPrivate(request: CategorySearchParams): Promise<Category> | Observable<Category> | Category;
}

export function CategoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCategory", "updateCategory", "getCategoryPrivateList", "getCategoryPrivate"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORY_SERVICE_NAME = "CategoryService";
