// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v4.24.4
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "user";

export enum UserRole {
  UNKNOWN = 0,
  CUSTOMER = 1,
  SUPPORT = 2,
  ADMIN = 3,
  ROOT = 4,
  UNRECOGNIZED = -1,
}

export interface User {
  id: string;
  role: UserRole;
  email: string;
  password: string;
}

export interface UserList {
  items: User[];
}

export interface UserSearchParams {
  id?: string | undefined;
  email?: string | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  findOne(request: UserSearchParams): Observable<User>;

  getEmployerList(request: Empty): Observable<UserList>;
}

export interface UserServiceController {
  findOne(request: UserSearchParams): Promise<User> | Observable<User> | User;

  getEmployerList(request: Empty): Promise<UserList> | Observable<UserList> | UserList;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOne", "getEmployerList"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
