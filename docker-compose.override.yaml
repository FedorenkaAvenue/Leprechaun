services:
  server:
    container_name: leprechaun-infra-server
    networks:
      # client:
      #   aliases:
      #     - api.leprechaun.loc
      #     - media.leprechaun.loc
      #     - leprechaun.loc
      server_infra:
    ports:
      - ${WEB_SERVER_PORT}:80
    volumes:
      - ./infra/server/.http_auth:/etc/nginx/.http_auth
    depends_on:
      - app_api
      - app_client

#   s3:
#     image: minio/minio
#     container_name: leprechaun-s3
#     networks:
#       - api
#     environment:
#       - MINIO_ROOT_USER=${S3_USER}
#       - MINIO_ROOT_PASSWORD=${S3_PASSWORD}
#     volumes:
#       - ./s3/data:/data
#       - ./s3/entrypoint.sh:/docker-entrypoint-init.d/entrypoint.sh
#     entrypoint: /docker-entrypoint-init.d/entrypoint.sh ${S3_USER} ${S3_PASSWORD} ${S3_PORT} ${S3_PORT_UI}

#   db_main:
#     container_name: leprechaun_db_main
#     networks:
#       - api
#       - db
#     build:
#       context: ./db/main
#       dockerfile: Dockerfile
#     ports:
#       - ${DB_PORT_EXPOSE}:${DB_PORT}
#     environment:
#       - POSTGRES_PASSWORD=${DB_PASSWORD}
#       - POSTGRES_USER=${DB_USER}
#       - POSTGRES_DATABASE=${DB_DATABASE}

#   db_cache:
#     container_name: leprechaun_db_cache
#     networks:
#       - api
#     build:
#       context: ./db/cache
#       dockerfile: Dockerfile
#       args:
#         - REDIS_PASSWORD=${CACHE_PASSWORD}
#     environment:
#       - REDIS_PASSWORD=${CACHE_PASSWORD}
#     ports:
#       - ${CACHE_PORT_EXPOSE}:${CACHE_PORT}

#   broker_net:
#     container_name: leprechaun_broker_net
#     ports:
#       - ${BROKER_NET_PORT_EXPOSE}:5672
#     networks:
#       - api

  ### APSS

  app_api:
    container_name: leprechaun-app-api
    networks:
      - server_infra
      - api_domain
    environment:
      - HOST_NAME
      - DOMAIN_PUBLIC
      - DOMAIN_PRIVATE
      - DOMAIN_MEDIA
      - JWT_ACCESS_TOKEN_KEY
      - JWT_ACCESS_TOKEN_TTL
      - AUTH_SERVICE_CLIENT_HOST
      - AUTH_SERVICE_CLIENT_PORT
      - USER_SERVICE_CLIENT_HOST
      - USER_SERVICE_CLIENT_PORT
      - APP_NAME
    depends_on:
      - service_auth_client

#   api_gateway_ws:
#     container_name: leprechaun_api_gateway_ws
#     networks:
#       - api
#     environment:
#       - SESSION_COOKIE_SECRET
#       - SOCKET_HOST
#       - SOCKET_PORT
#       - SOCKET_USER
#       - SOCKET_PASSWORD
#       - SOCKET_DB_NUMBER
#       - DOMAIN_PUBLIC
#       - DOMAIN_PRIVATE
#       - BROKER_NET_HOST
#       - BROKER_NET_PORT
#     depends_on:
#       - db_cache

  app_client:
    container_name: leprechaun-app-client
    networks:
      - server_infra
    environment:
      - APP_NAME
      - LANGS
      - NEXT_PUBLIC_LANGS=${LANGS}
      - DOMAIN_PUBLIC
      - DOMAIN_MEDIA
      - DOMAIN_API
      - NEXT_PUBLIC_DOMAIN_API=${DOMAIN_API}
      - CURRENCY_SYMBOL
    depends_on:
      - app_api

  ### SERVICES

  service_auth_client:
    container_name: leprechaun-service-auth-client
    environment:
      - AUTH_SERVICE_CLIENT_PORT
      - USER_SERVICE_CLIENT_HOST
      - USER_SERVICE_CLIENT_PORT
      - JWT_ACCESS_TOKEN_KEY
      - JWT_ACCESS_TOKEN_TTL
      - JWT_REFRESH_TOKEN_KEY
      - JWT_REFRESH_TOKEN_TTL

    networks:
      - api_domain
      - auth_service

  service_user_client:
    container_name: leprechaun-service-user-client
    environment:
      - USER_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${USER_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${USER_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${USER_SERVICE_DB_HOST}
      - POSTGRES_PORT=${USER_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${USER_SERVICE_DB_DATABASE}
    networks:
      - api_domain
      - user_service
    depends_on:
      - service_user_db

  service_user_db:
    container_name: leprechaun-service-user-db
    build:
      context: ./services/user/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${USER_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${USER_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${USER_SERVICE_DB_DATABASE}
    ports:
      - ${USER_SERVICE_DB_PORT_EXPOSE}:${USER_SERVICE_DB_PORT}
    networks:
      - user_service

networks:
  server_infra:
    driver: bridge
    name: leprechaun_server_infra
  api_domain:
    driver: bridge
    name: leprechaun_api_domain
  auth_service:
    driver: bridge
    name: leprechaun_auth_service
  user_service:
    driver: bridge
    name: leprechaun_user_service
