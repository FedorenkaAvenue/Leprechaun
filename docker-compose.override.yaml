services:

  ### INFRA

  infra_server:
    container_name: leprechaun-infra-server
    networks:
      server_infra:
        aliases:
          - api.leprechaun.loc
          - leprechaun.loc
    ports:
      - ${WEB_SERVER_PORT}:80
    volumes:
      - ./infra/server/.http_auth:/etc/nginx/.http_auth
    depends_on:
      - app_api
      - app_client
      - app_ws

  infra_messaging_rabbitmq:
    container_name: leprechaun-infra-messaging-rabbitmq
    image: rabbitmq:4-management-alpine
    ports:
      - ${MESSAGING_RABBITMQ_PORT_EXPOSE}:${MESSAGING_RABBITMQ_PORT}
    networks:
      - api_app

  infra_messaging_kafka:
    container_name: leprechaun-infra-messaging-kafka
    image: confluentinc/cp-kafka:7.5.0
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${MESSAGING_KAFKA_HOST}:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${MESSAGING_KAFKA_PORT},CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${MESSAGING_KAFKA_HOST}:${MESSAGING_KAFKA_PORT}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: xJcJL5eSTcO1pQAjPC7hNg
    networks:
      - api_app

  # infra_notifications:
  #   container_name: leprechaun-infra-notifications
  #   networks:
  #     - ws_app
  #   build:
  #     context: ./infra/notifications
  #     dockerfile: Dockerfile
  #     args:
  #       - REDIS_PASSWORD=${NOTIFICATIONS_PASSWORD}
  #   environment:
  #     - REDIS_PASSWORD=${NOTIFICATIONS_PASSWORD}
  #   ports:
  #     - ${NOTIFICATIONS_PORT_EXPOSE}:${NOTIFICATIONS_PORT}

  ### APSS

  app_api:
    container_name: leprechaun-app-api
    networks:
      - server_infra
      - api_app
    environment:
      - APP_NAME
      - HOST_NAME
      - LANGS
      - DOMAIN_PUBLIC
      - DOMAIN_PRIVATE
      - JWT_ACCESS_TOKEN_KEY
      - JWT_ACCESS_TOKEN_TTL
      - AUTH_SERVICE_CLIENT_HOST
      - AUTH_SERVICE_CLIENT_PORT
      - USER_SERVICE_CLIENT_HOST
      - USER_SERVICE_CLIENT_PORT
      - PROPGROUP_SERVICE_CLIENT_HOST
      - PROPGROUP_SERVICE_CLIENT_PORT
      - CATEGORY_SERVICE_CLIENT_HOST
      - CATEGORY_SERVICE_CLIENT_PORT
      - PRODUCT_SERVICE_CLIENT_HOST
      - PRODUCT_SERVICE_CLIENT_PORT
      - WISHLIST_SERVICE_CLIENT_HOST
      - WISHLIST_SERVICE_CLIENT_PORT
      - HISTORY_SERVICE_CLIENT_HOST
      - HISTORY_SERVICE_CLIENT_PORT
      - SUBSCRIPTION_SERVICE_CLIENT_HOST
      - SUBSCRIPTION_SERVICE_CLIENT_PORT
      - ORDER_SERVICE_CLIENT_HOST
      - ORDER_SERVICE_CLIENT_PORT
    depends_on:
      - infra_messaging_rabbitmq
      - service_auth_client
      - service_propgroup_client
      - service_user_client
      - service_trans_client
      - service_category_client
      - service_product_client
      - service_wishlist_client
      - service_history_client
      - service_subscription_client
      - service_order_client

  app_client:
    container_name: leprechaun-app-client
    networks:
      - server_infra
    environment:
      - APP_NAME
      - LANGS
      - NEXT_PUBLIC_LANGS=${LANGS}
      - DOMAIN_PUBLIC
      - DOMAIN_API
      - NEXT_PUBLIC_DOMAIN_API=${DOMAIN_API}
      - CURRENCY_SYMBOL
    depends_on:
      - app_api

  app_ws:
    container_name: leprechaun-app-ws
    networks:
      - ws_app
    environment:
      - DOMAIN_PUBLIC
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
    # depends_on:
    #   - infra_notifications

  ### SERVICES

  service_auth_client:
    container_name: leprechaun-service-auth-client
    environment:
      - AUTH_SERVICE_CLIENT_PORT
      - USER_SERVICE_CLIENT_HOST
      - USER_SERVICE_CLIENT_PORT
      - JWT_ACCESS_TOKEN_KEY
      - JWT_ACCESS_TOKEN_TTL
      - JWT_REFRESH_TOKEN_KEY
      - JWT_REFRESH_TOKEN_TTL
    networks:
      - api_app
      - auth_service

  service_user_client:
    container_name: leprechaun-service-user-client
    environment:
      - USER_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${USER_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${USER_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${USER_SERVICE_DB_HOST}
      - POSTGRES_PORT=${USER_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${USER_SERVICE_DB_DATABASE}
    networks:
      - api_app
      - user_service
    depends_on:
      - service_user_db

  service_user_db:
    container_name: leprechaun-service-user-db
    build:
      context: ./services/user/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${USER_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${USER_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${USER_SERVICE_DB_DATABASE}
    ports:
      - ${USER_SERVICE_DB_PORT_EXPOSE}:${USER_SERVICE_DB_PORT}
    networks:
      - user_service

  service_propgroup_client:
    container_name: leprechaun-service-propgroup-client
    environment:
      - PROPGROUP_SERVICE_CLIENT_PORT
      - TRANS_SERVICE_CLIENT_HOST
      - TRANS_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${PROPGROUP_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${PROPGROUP_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${PROPGROUP_SERVICE_DB_HOST}
      - POSTGRES_PORT=${PROPGROUP_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${PROPGROUP_SERVICE_DB_DATABASE}
      - CATEGORY_SERVICE_CLIENT_HOST
      - CATEGORY_SERVICE_CLIENT_PORT
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
    networks:
      - api_app
      - propgroup_service
    depends_on:
      - service_propgroup_db

  service_propgroup_db:
    container_name: leprechaun-service-propgroup-db
    build:
      context: ./services/prop_group/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${PROPGROUP_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${PROPGROUP_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${PROPGROUP_SERVICE_DB_DATABASE}
    ports:
      - ${PROPGROUP_SERVICE_DB_PORT_EXPOSE}:${PROPGROUP_SERVICE_DB_PORT}
    networks:
      - propgroup_service

  service_trans_client:
    container_name: leprechaun-service-trans-client
    environment:
      - TRANS_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${TRANS_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${TRANS_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${TRANS_SERVICE_DB_HOST}
      - POSTGRES_PORT=${TRANS_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${TRANS_SERVICE_DB_DATABASE}
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
    networks:
      - api_app
      - trans_service
    depends_on:
      - service_trans_db

  service_trans_db:
    container_name: leprechaun-service-trans-db
    build:
      context: ./services/trans/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${TRANS_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${TRANS_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${TRANS_SERVICE_DB_DATABASE}
    ports:
      - ${TRANS_SERVICE_DB_PORT_EXPOSE}:${TRANS_SERVICE_DB_PORT}
    networks:
      - trans_service

  service_category_client:
    container_name: leprechaun-service-category-client
    environment:
      - CATEGORY_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${CATEGORY_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${CATEGORY_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${CATEGORY_SERVICE_DB_HOST}
      - POSTGRES_PORT=${CATEGORY_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${CATEGORY_SERVICE_DB_DATABASE}
      - CATEGORY_SERVICE_S3_HOST
      - CATEGORY_SERVICE_S3_PORT
      - CATEGORY_SERVICE_S3_PASSWORD
      - CATEGORY_SERVICE_S3_USER
      - TRANS_SERVICE_CLIENT_HOST
      - TRANS_SERVICE_CLIENT_PORT
      - PROPGROUP_SERVICE_CLIENT_HOST
      - PROPGROUP_SERVICE_CLIENT_PORT
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
      - PRODUCT_SERVICE_CLIENT_HOST
      - PRODUCT_SERVICE_CLIENT_PORT
    networks:
      - api_app
      - category_service
    depends_on:
      - service_category_db
      - service_category_s3

  service_category_db:
    container_name: leprechaun-service-category-db
    build:
      context: ./services/category/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${CATEGORY_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${CATEGORY_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${CATEGORY_SERVICE_DB_DATABASE}
    ports:
      - ${CATEGORY_SERVICE_DB_PORT_EXPOSE}:${CATEGORY_SERVICE_DB_PORT}
    networks:
      - category_service

  service_category_s3:
    container_name: leprechaun-service-category-s3
    extends:
      file: docker-compose.shared.yaml
      service: s3
    environment:
      - MINIO_ROOT_USER=${CATEGORY_SERVICE_S3_USER}
      - MINIO_ROOT_PASSWORD=${CATEGORY_SERVICE_S3_PASSWORD}
    entrypoint: /docker-entrypoint-init.d/entrypoint.sh ${CATEGORY_SERVICE_S3_USER} ${CATEGORY_SERVICE_S3_PASSWORD} ${CATEGORY_SERVICE_S3_PORT} ${CATEGORY_SERVICE_S3_UI_PORT}
    volumes:
      - ./services/category/s3/data:/data
    networks:
      - category_service

  service_product_client:
    container_name: leprechaun-service-product-client
    environment:
      - PRODUCT_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${PRODUCT_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${PRODUCT_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${PRODUCT_SERVICE_DB_HOST}
      - POSTGRES_PORT=${PRODUCT_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${PRODUCT_SERVICE_DB_DATABASE}
      - PRODUCT_SERVICE_S3_HOST
      - PRODUCT_SERVICE_S3_PORT
      - PRODUCT_SERVICE_S3_PASSWORD
      - PRODUCT_SERVICE_S3_USER
      - TRANS_SERVICE_CLIENT_HOST
      - TRANS_SERVICE_CLIENT_PORT
      - CATEGORY_SERVICE_CLIENT_HOST
      - CATEGORY_SERVICE_CLIENT_PORT
      - PROPGROUP_SERVICE_CLIENT_HOST
      - PROPGROUP_SERVICE_CLIENT_PORT
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
    networks:
      - api_app
      - product_service
    depends_on:
      - service_product_db
      - service_product_s3

  service_product_db:
    container_name: leprechaun-service-product-db
    build:
      context: ./services/product/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${PRODUCT_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${PRODUCT_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${PRODUCT_SERVICE_DB_DATABASE}
    ports:
      - ${PRODUCT_SERVICE_DB_PORT_EXPOSE}:${PRODUCT_SERVICE_DB_PORT}
    networks:
      - product_service

  service_product_s3:
    container_name: leprechaun-service-product-s3
    extends:
      file: docker-compose.shared.yaml
      service: s3
    environment:
      - MINIO_ROOT_USER=${PRODUCT_SERVICE_S3_USER}
      - MINIO_ROOT_PASSWORD=${PRODUCT_SERVICE_S3_PASSWORD}
    entrypoint: /docker-entrypoint-init.d/entrypoint.sh ${PRODUCT_SERVICE_S3_USER} ${PRODUCT_SERVICE_S3_PASSWORD} ${PRODUCT_SERVICE_S3_PORT} ${PRODUCT_SERVICE_S3_UI_PORT}
    volumes:
      - ./services/product/s3/data:/data
    networks:
      - product_service

  service_wishlist_client:
    container_name: leprechaun-service-wishlist-client
    environment:
      - WISHLIST_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${WISHLIST_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${WISHLIST_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${WISHLIST_SERVICE_DB_HOST}
      - POSTGRES_PORT=${WISHLIST_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${WISHLIST_SERVICE_DB_DATABASE}
      - PRODUCT_SERVICE_CLIENT_HOST
      - PRODUCT_SERVICE_CLIENT_PORT
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
      - MESSAGING_KAFKA_HOST
      - MESSAGING_KAFKA_PORT
    networks:
      - api_app
      - wishlist_service
    depends_on:
      - service_wishlist_db

  service_wishlist_db:
    container_name: leprechaun-service-wishlist-db
    build:
      context: ./services/wishlist/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${WISHLIST_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${WISHLIST_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${WISHLIST_SERVICE_DB_DATABASE}
    ports:
      - ${WISHLIST_SERVICE_DB_PORT_EXPOSE}:${WISHLIST_SERVICE_DB_PORT}
    networks:
      - wishlist_service

  service_history_client:
    container_name: leprechaun-service-history-client
    environment:
      - HISTORY_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${HISTORY_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${HISTORY_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${HISTORY_SERVICE_DB_HOST}
      - POSTGRES_PORT=${HISTORY_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${HISTORY_SERVICE_DB_DATABASE}
      - PRODUCT_SERVICE_CLIENT_HOST
      - PRODUCT_SERVICE_CLIENT_PORT
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
    networks:
      - api_app
      - history_service
    depends_on:
      - service_history_db

  service_history_db:
    container_name: leprechaun-service-history-db
    build:
      context: ./services/history/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${HISTORY_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${HISTORY_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${HISTORY_SERVICE_DB_DATABASE}
    ports:
      - ${HISTORY_SERVICE_DB_PORT_EXPOSE}:${HISTORY_SERVICE_DB_PORT}
    networks:
      - history_service

  service_subscription_client:
    container_name: leprechaun-service-subscription-client
    environment:
      - SUBSCRIPTION_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${SUBSCRIPTION_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${SUBSCRIPTION_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${SUBSCRIPTION_SERVICE_DB_HOST}
      - POSTGRES_PORT=${SUBSCRIPTION_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${SUBSCRIPTION_SERVICE_DB_DATABASE}
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
    networks:
      - api_app
      - subscription_service
    depends_on:
      - service_subscription_db

  service_subscription_db:
    container_name: leprechaun-service-subscription-db
    build:
      context: ./services/subscription/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${SUBSCRIPTION_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${SUBSCRIPTION_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${SUBSCRIPTION_SERVICE_DB_DATABASE}
    ports:
      - ${SUBSCRIPTION_SERVICE_DB_PORT_EXPOSE}:${SUBSCRIPTION_SERVICE_DB_PORT}
    networks:
      - subscription_service

  service_order_client:
    container_name: leprechaun-service-order-client
    environment:
      - ORDER_SERVICE_CLIENT_PORT
      - POSTGRES_USER=${ORDER_SERVICE_DB_USER}
      - POSTGRES_PASSWORD=${ORDER_SERVICE_DB_PASSWORD}
      - POSTGRES_HOST=${ORDER_SERVICE_DB_HOST}
      - POSTGRES_PORT=${ORDER_SERVICE_DB_PORT}
      - POSTGRES_DATABASE=${ORDER_SERVICE_DB_DATABASE}
      - PRODUCT_SERVICE_CLIENT_HOST
      - PRODUCT_SERVICE_CLIENT_PORT
      - MESSAGING_RABBITMQ_HOST
      - MESSAGING_RABBITMQ_PORT
    networks:
      - api_app
      - order_service
    depends_on:
      - service_order_db

  service_order_db:
    container_name: leprechaun-service-order-db
    build:
      context: ./services/order/db
      dockerfile: Dockerfile
    environment:
      - POSTGRES_PASSWORD=${ORDER_SERVICE_DB_PASSWORD}
      - POSTGRES_USER=${ORDER_SERVICE_DB_USER}
      - POSTGRES_DATABASE=${ORDER_SERVICE_DB_DATABASE}
    ports:
      - ${ORDER_SERVICE_DB_PORT_EXPOSE}:${ORDER_SERVICE_DB_PORT}
    networks:
      - order_service

networks:
  server_infra:
    driver: bridge
    name: leprechaun_server_infra
  api_app:
    driver: bridge
    name: leprechaun_api_app
  ws_app:
    driver: bridge
    name: leprechaun_ws_app
  auth_service:
    driver: bridge
    name: leprechaun_auth_service
  user_service:
    driver: bridge
    name: leprechaun_user_service
  propgroup_service:
    driver: bridge
    name: leprechaun_propgroup_service
  trans_service:
    driver: bridge
    name: leprechaun_trans_service
  category_service:
    driver: bridge
    name: leprechaun_category_service
  product_service:
    driver: bridge
    name: leprechaun_product_service
  wishlist_service:
    driver: bridge
    name: leprechaun_wishlist_service
  history_service:
    driver: bridge
    name: leprechaun_history_service
  subscription_service:
    driver: bridge
    name: leprechaun_subscription_service
  order_service:
    driver: bridge
    name: leprechaun_order_service
