// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: prop_group.proto

package prop_group_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PropertyGroupService_GetGroupPrivate_FullMethodName     = "/prop_group.PropertyGroupService/getGroupPrivate"
	PropertyGroupService_GetGroupListPrivate_FullMethodName = "/prop_group.PropertyGroupService/getGroupListPrivate"
	PropertyGroupService_CreateGroup_FullMethodName         = "/prop_group.PropertyGroupService/createGroup"
	PropertyGroupService_UpdateGroup_FullMethodName         = "/prop_group.PropertyGroupService/updateGroup"
)

// PropertyGroupServiceClient is the client API for PropertyGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyGroupServiceClient interface {
	GetGroupPrivate(ctx context.Context, in *PropertyGroupSearchParams, opts ...grpc.CallOption) (*PropertyGroup, error)
	GetGroupListPrivate(ctx context.Context, in *PropertyGroupListSearchParams, opts ...grpc.CallOption) (*PropertyGroupList, error)
	CreateGroup(ctx context.Context, in *PropertyGroupCU, opts ...grpc.CallOption) (*PropertyGroup, error)
	UpdateGroup(ctx context.Context, in *PropertyGroupUpdateParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type propertyGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyGroupServiceClient(cc grpc.ClientConnInterface) PropertyGroupServiceClient {
	return &propertyGroupServiceClient{cc}
}

func (c *propertyGroupServiceClient) GetGroupPrivate(ctx context.Context, in *PropertyGroupSearchParams, opts ...grpc.CallOption) (*PropertyGroup, error) {
	out := new(PropertyGroup)
	err := c.cc.Invoke(ctx, PropertyGroupService_GetGroupPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyGroupServiceClient) GetGroupListPrivate(ctx context.Context, in *PropertyGroupListSearchParams, opts ...grpc.CallOption) (*PropertyGroupList, error) {
	out := new(PropertyGroupList)
	err := c.cc.Invoke(ctx, PropertyGroupService_GetGroupListPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyGroupServiceClient) CreateGroup(ctx context.Context, in *PropertyGroupCU, opts ...grpc.CallOption) (*PropertyGroup, error) {
	out := new(PropertyGroup)
	err := c.cc.Invoke(ctx, PropertyGroupService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyGroupServiceClient) UpdateGroup(ctx context.Context, in *PropertyGroupUpdateParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PropertyGroupService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyGroupServiceServer is the server API for PropertyGroupService service.
// All implementations must embed UnimplementedPropertyGroupServiceServer
// for forward compatibility
type PropertyGroupServiceServer interface {
	GetGroupPrivate(context.Context, *PropertyGroupSearchParams) (*PropertyGroup, error)
	GetGroupListPrivate(context.Context, *PropertyGroupListSearchParams) (*PropertyGroupList, error)
	CreateGroup(context.Context, *PropertyGroupCU) (*PropertyGroup, error)
	UpdateGroup(context.Context, *PropertyGroupUpdateParams) (*emptypb.Empty, error)
	mustEmbedUnimplementedPropertyGroupServiceServer()
}

// UnimplementedPropertyGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyGroupServiceServer struct {
}

func (UnimplementedPropertyGroupServiceServer) GetGroupPrivate(context.Context, *PropertyGroupSearchParams) (*PropertyGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupPrivate not implemented")
}
func (UnimplementedPropertyGroupServiceServer) GetGroupListPrivate(context.Context, *PropertyGroupListSearchParams) (*PropertyGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupListPrivate not implemented")
}
func (UnimplementedPropertyGroupServiceServer) CreateGroup(context.Context, *PropertyGroupCU) (*PropertyGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedPropertyGroupServiceServer) UpdateGroup(context.Context, *PropertyGroupUpdateParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedPropertyGroupServiceServer) mustEmbedUnimplementedPropertyGroupServiceServer() {}

// UnsafePropertyGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyGroupServiceServer will
// result in compilation errors.
type UnsafePropertyGroupServiceServer interface {
	mustEmbedUnimplementedPropertyGroupServiceServer()
}

func RegisterPropertyGroupServiceServer(s grpc.ServiceRegistrar, srv PropertyGroupServiceServer) {
	s.RegisterService(&PropertyGroupService_ServiceDesc, srv)
}

func _PropertyGroupService_GetGroupPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyGroupSearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyGroupServiceServer).GetGroupPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyGroupService_GetGroupPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyGroupServiceServer).GetGroupPrivate(ctx, req.(*PropertyGroupSearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyGroupService_GetGroupListPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyGroupListSearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyGroupServiceServer).GetGroupListPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyGroupService_GetGroupListPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyGroupServiceServer).GetGroupListPrivate(ctx, req.(*PropertyGroupListSearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyGroupService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyGroupCU)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyGroupServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyGroupService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyGroupServiceServer).CreateGroup(ctx, req.(*PropertyGroupCU))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyGroupService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyGroupUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyGroupServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyGroupService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyGroupServiceServer).UpdateGroup(ctx, req.(*PropertyGroupUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyGroupService_ServiceDesc is the grpc.ServiceDesc for PropertyGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prop_group.PropertyGroupService",
	HandlerType: (*PropertyGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getGroupPrivate",
			Handler:    _PropertyGroupService_GetGroupPrivate_Handler,
		},
		{
			MethodName: "getGroupListPrivate",
			Handler:    _PropertyGroupService_GetGroupListPrivate_Handler,
		},
		{
			MethodName: "createGroup",
			Handler:    _PropertyGroupService_CreateGroup_Handler,
		},
		{
			MethodName: "updateGroup",
			Handler:    _PropertyGroupService_UpdateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prop_group.proto",
}

const (
	PropertyService_CreateProperty_FullMethodName = "/prop_group.PropertyService/createProperty"
	PropertyService_DeleteProperty_FullMethodName = "/prop_group.PropertyService/deleteProperty"
)

// PropertyServiceClient is the client API for PropertyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyServiceClient interface {
	CreateProperty(ctx context.Context, in *PropertyCU, opts ...grpc.CallOption) (*Property, error)
	DeleteProperty(ctx context.Context, in *PropertySearchParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type propertyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyServiceClient(cc grpc.ClientConnInterface) PropertyServiceClient {
	return &propertyServiceClient{cc}
}

func (c *propertyServiceClient) CreateProperty(ctx context.Context, in *PropertyCU, opts ...grpc.CallOption) (*Property, error) {
	out := new(Property)
	err := c.cc.Invoke(ctx, PropertyService_CreateProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeleteProperty(ctx context.Context, in *PropertySearchParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PropertyService_DeleteProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyServiceServer is the server API for PropertyService service.
// All implementations must embed UnimplementedPropertyServiceServer
// for forward compatibility
type PropertyServiceServer interface {
	CreateProperty(context.Context, *PropertyCU) (*Property, error)
	DeleteProperty(context.Context, *PropertySearchParams) (*emptypb.Empty, error)
	mustEmbedUnimplementedPropertyServiceServer()
}

// UnimplementedPropertyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyServiceServer struct {
}

func (UnimplementedPropertyServiceServer) CreateProperty(context.Context, *PropertyCU) (*Property, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProperty not implemented")
}
func (UnimplementedPropertyServiceServer) DeleteProperty(context.Context, *PropertySearchParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
}
func (UnimplementedPropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {}

// UnsafePropertyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyServiceServer will
// result in compilation errors.
type UnsafePropertyServiceServer interface {
	mustEmbedUnimplementedPropertyServiceServer()
}

func RegisterPropertyServiceServer(s grpc.ServiceRegistrar, srv PropertyServiceServer) {
	s.RegisterService(&PropertyService_ServiceDesc, srv)
}

func _PropertyService_CreateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyCU)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).CreateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_CreateProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).CreateProperty(ctx, req.(*PropertyCU))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeleteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertySearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyService_DeleteProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, req.(*PropertySearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyService_ServiceDesc is the grpc.ServiceDesc for PropertyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prop_group.PropertyService",
	HandlerType: (*PropertyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createProperty",
			Handler:    _PropertyService_CreateProperty_Handler,
		},
		{
			MethodName: "deleteProperty",
			Handler:    _PropertyService_DeleteProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prop_group.proto",
}
