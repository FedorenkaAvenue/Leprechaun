// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v4.24.4
// source: prop_group.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { TransCU } from "./trans";

export const protobufPackage = "prop_group";

export interface PropertyGroupSearchParams {
  id: number;
}

export interface PropertyGroupPreview {
  id: number;
  title: TransCU;
  altName: string;
  isPrimary: boolean;
  comment: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface PropertyGroup {
  id: number;
  title: TransCU;
  altName: string;
  isPrimary: boolean;
  comment: string;
  createdAt: Date;
  updatedAt: Date;
  properties: Property[];
}

export interface PropertyGroupCU {
  title: TransCU;
  altName: string;
  isPrimary: boolean;
  comment: string;
}

export interface PropertyGroupUpdateParams {
  id: number;
  data: PropertyGroupCU;
}

export interface PropertyGroupListPreview {
  items: PropertyGroupPreview[];
}

export interface Property {
  id: number;
  title: TransCU;
  altName: string;
  comment: string;
  createdAt: Date;
  updatedAt: Date;
}

export const PROP_GROUP_PACKAGE_NAME = "prop_group";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface PropertyGroupServiceClient {
  getGroupPrivate(request: PropertyGroupSearchParams): Observable<PropertyGroup>;

  getGroupListPrivate(request: Empty): Observable<PropertyGroupListPreview>;

  createGroup(request: PropertyGroupCU): Observable<PropertyGroup>;

  updateGroup(request: PropertyGroupUpdateParams): Observable<Empty>;
}

export interface PropertyGroupServiceController {
  getGroupPrivate(
    request: PropertyGroupSearchParams,
  ): Promise<PropertyGroup> | Observable<PropertyGroup> | PropertyGroup;

  getGroupListPrivate(
    request: Empty,
  ): Promise<PropertyGroupListPreview> | Observable<PropertyGroupListPreview> | PropertyGroupListPreview;

  createGroup(request: PropertyGroupCU): Promise<PropertyGroup> | Observable<PropertyGroup> | PropertyGroup;

  updateGroup(request: PropertyGroupUpdateParams): void;
}

export function PropertyGroupServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getGroupPrivate", "getGroupListPrivate", "createGroup", "updateGroup"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PropertyGroupService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PropertyGroupService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROPERTY_GROUP_SERVICE_NAME = "PropertyGroupService";
