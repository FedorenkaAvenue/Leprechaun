// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: trans.proto

package trans_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransService_GetTrans_FullMethodName    = "/trans.TransService/GetTrans"
	TransService_CreateTrans_FullMethodName = "/trans.TransService/CreateTrans"
	TransService_DeleteTrans_FullMethodName = "/trans.TransService/DeleteTrans"
)

// TransServiceClient is the client API for TransService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransServiceClient interface {
	GetTrans(ctx context.Context, in *TransDTO, opts ...grpc.CallOption) (*Trans, error)
	CreateTrans(ctx context.Context, in *TransCreateDTO, opts ...grpc.CallOption) (*Trans, error)
	DeleteTrans(ctx context.Context, in *TransDTO, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type transServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransServiceClient(cc grpc.ClientConnInterface) TransServiceClient {
	return &transServiceClient{cc}
}

func (c *transServiceClient) GetTrans(ctx context.Context, in *TransDTO, opts ...grpc.CallOption) (*Trans, error) {
	out := new(Trans)
	err := c.cc.Invoke(ctx, TransService_GetTrans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) CreateTrans(ctx context.Context, in *TransCreateDTO, opts ...grpc.CallOption) (*Trans, error) {
	out := new(Trans)
	err := c.cc.Invoke(ctx, TransService_CreateTrans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) DeleteTrans(ctx context.Context, in *TransDTO, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransService_DeleteTrans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransServiceServer is the server API for TransService service.
// All implementations must embed UnimplementedTransServiceServer
// for forward compatibility
type TransServiceServer interface {
	GetTrans(context.Context, *TransDTO) (*Trans, error)
	CreateTrans(context.Context, *TransCreateDTO) (*Trans, error)
	DeleteTrans(context.Context, *TransDTO) (*emptypb.Empty, error)
	mustEmbedUnimplementedTransServiceServer()
}

// UnimplementedTransServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransServiceServer struct {
}

func (UnimplementedTransServiceServer) GetTrans(context.Context, *TransDTO) (*Trans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrans not implemented")
}
func (UnimplementedTransServiceServer) CreateTrans(context.Context, *TransCreateDTO) (*Trans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrans not implemented")
}
func (UnimplementedTransServiceServer) DeleteTrans(context.Context, *TransDTO) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrans not implemented")
}
func (UnimplementedTransServiceServer) mustEmbedUnimplementedTransServiceServer() {}

// UnsafeTransServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransServiceServer will
// result in compilation errors.
type UnsafeTransServiceServer interface {
	mustEmbedUnimplementedTransServiceServer()
}

func RegisterTransServiceServer(s grpc.ServiceRegistrar, srv TransServiceServer) {
	s.RegisterService(&TransService_ServiceDesc, srv)
}

func _TransService_GetTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).GetTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransService_GetTrans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).GetTrans(ctx, req.(*TransDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_CreateTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransCreateDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).CreateTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransService_CreateTrans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).CreateTrans(ctx, req.(*TransCreateDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_DeleteTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).DeleteTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransService_DeleteTrans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).DeleteTrans(ctx, req.(*TransDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// TransService_ServiceDesc is the grpc.ServiceDesc for TransService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trans.TransService",
	HandlerType: (*TransServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrans",
			Handler:    _TransService_GetTrans_Handler,
		},
		{
			MethodName: "CreateTrans",
			Handler:    _TransService_CreateTrans_Handler,
		},
		{
			MethodName: "DeleteTrans",
			Handler:    _TransService_DeleteTrans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trans.proto",
}
