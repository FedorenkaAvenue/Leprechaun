services:

  ### INFRA

  infra_server:
    restart: unless-stopped
    build:
      context: ./infra/server
      dockerfile: Dockerfile
    volumes:
      - ./infra/server/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/server/conf/leprechaun.conf:/etc/nginx/conf.d/leprechaun.conf
      - ./infra/server/conf/leprechaun.dev.conf:/etc/nginx/conf.d/leprechaun.dev.conf
    depends_on:
      - app_admin

  infra_messaging_rabbitmq:
    restart: unless-stopped
    volumes:
      - ./infra/messaging/rabbitMQ/rabbitmq.config:/etc/rabbitmq/conf.d/rabbitmq.config
    ports:
      - ${MESSAGING_RABBITMQ_PORT_UI_EXPOSE}:15672

  infra_messaging_kafka:
    restart: unless-stopped
    ports:
      - ${MESSAGING_KAFKA_PORT_EXPOSE}:${MESSAGING_KAFKA_PORT}

  infra_messaging_kafka-ui:
    container_name: leprechaun-infra-messaging-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "${MESSAGING_KAFKA_PORT_UI_EXPOSE:-8080}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${MESSAGING_KAFKA_HOST}:${MESSAGING_KAFKA_PORT}
    networks:
      - api_app
    depends_on:
      - infra_messaging_kafka

  # infra_notifications:
  #   restart: unless-stopped
  #   volumes:
  #     - ./infra/notifications/redis.conf:/app/redis.conf

  ### APPS

  app_api:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run dev
    volumes:
      - ./apps/api:/app
    environment:
      - IS_DEV=true
      - MAIL_SMPT_PORT_DEV
    depends_on:
      - mailcatcher

  app_ws:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run dev
    volumes:
      - ./apps/ws:/app
    environment:
      - IS_DEV=true

  app_admin:
    restart: unless-stopped
    container_name: leprechaun-app-admin
    build:
      context: ./apps/admin
      dockerfile: Dockerfile
    volumes:
      - ./apps/admin:/app
    environment:
      - LANGS
      - VITE_APP_NAME=${APP_NAME}
      - DOMAIN_PUBLIC
      - VITE_DOMAIN_API=${DOMAIN_API}
    networks:
      - server_infra
    depends_on:
      - app_api
      - translations

  app_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    working_dir: /app
    command: yarn dev
    volumes:
      - ./apps/client:/app
    environment:
      - IS_DEV=true
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - translations

  ### SERVICES

  service_auth_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${AUTH_SERVICE_CLIENT_PORT_EXPOSE}:${AUTH_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/auth/client:/app
    environment:
      - IS_DEV=true

  service_user_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${USER_SERVICE_CLIENT_PORT_EXPOSE}:${USER_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/user/client:/app
    environment:
      - IS_DEV=true

  service_user_db:
    restart: unless-stopped
    ports:
      - ${USER_SERVICE_DB_PORT_EXPOSE}:${USER_SERVICE_DB_PORT}
    volumes:
      - ./services/user/db/postgresql.conf:/app/postgresql.conf
      - ./services/user/db/pg_hba.conf:/app/pg_hba.conf

  service_propgroup_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${PROPGROUP_SERVICE_CLIENT_PORT_EXPOSE}:${PROPGROUP_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/prop_group/client:/app
    environment:
      - IS_DEV=true

  service_propgroup_db:
    restart: unless-stopped
    ports:
      - ${PROPGROUP_SERVICE_DB_PORT_EXPOSE}:${PROPGROUP_SERVICE_DB_PORT}
    volumes:
      - ./services/prop_group/db/postgresql.conf:/app/postgresql.conf
      - ./services/prop_group/db/pg_hba.conf:/app/pg_hba.conf

  service_trans_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${TRANS_SERVICE_CLIENT_PORT_EXPOSE}:${TRANS_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/trans/client:/app
    environment:
      - IS_DEV=true

  service_trans_db:
    restart: unless-stopped
    ports:
      - ${TRANS_SERVICE_DB_PORT_EXPOSE}:${TRANS_SERVICE_DB_PORT}
    volumes:
      - ./services/trans/db/postgresql.conf:/app/postgresql.conf
      - ./services/trans/db/pg_hba.conf:/app/pg_hba.conf

  service_category_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${CATEGORY_SERVICE_CLIENT_PORT_EXPOSE}:${CATEGORY_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/category/client:/app
    environment:
      - IS_DEV=true

  service_category_db:
    restart: unless-stopped
    ports:
      - ${CATEGORY_SERVICE_DB_PORT_EXPOSE}:${CATEGORY_SERVICE_DB_PORT}
    volumes:
      - ./services/category/db/postgresql.conf:/app/postgresql.conf
      - ./services/category/db/pg_hba.conf:/app/pg_hba.conf

  service_category_s3:
    restart: unless-stopped
    volumes:
      - ./services/category/s3/entrypoint.sh:/docker-entrypoint-init.d/entrypoint.sh
    ports:
      - ${CATEGORY_SERVICE_S3_PORT_EXPOSE}:${CATEGORY_SERVICE_S3_PORT}
      - ${CATEGORY_SERVICE_S3_UI_PORT}:${CATEGORY_SERVICE_S3_UI_PORT}

  service_product_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${PRODUCT_SERVICE_CLIENT_PORT_EXPOSE}:${PRODUCT_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/product/client:/app
    environment:
      - IS_DEV=true

  service_product_db:
    restart: unless-stopped
    ports:
      - ${PRODUCT_SERVICE_DB_PORT_EXPOSE}:${PRODUCT_SERVICE_DB_PORT}
    volumes:
      - ./services/product/db/postgresql.conf:/app/postgresql.conf
      - ./services/product/db/pg_hba.conf:/app/pg_hba.conf

  service_product_s3:
    restart: unless-stopped
    volumes:
      - ./services/product/s3/entrypoint.sh:/docker-entrypoint-init.d/entrypoint.sh
    ports:
      - ${PRODUCT_SERVICE_S3_PORT_EXPOSE}:${PRODUCT_SERVICE_S3_PORT}
      - ${PRODUCT_SERVICE_S3_UI_PORT}:${PRODUCT_SERVICE_S3_UI_PORT}

  service_wishlist_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${WISHLIST_SERVICE_CLIENT_PORT_EXPOSE}:${WISHLIST_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/wishlist/client:/app
    environment:
      - IS_DEV=true

  service_wishlist_db:
    restart: unless-stopped
    ports:
      - ${WISHLIST_SERVICE_DB_PORT_EXPOSE}:${WISHLIST_SERVICE_DB_PORT}
    volumes:
      - ./services/wishlist/db/postgresql.conf:/app/postgresql.conf
      - ./services/wishlist/db/pg_hba.conf:/app/pg_hba.conf

  service_history_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${HISTORY_SERVICE_CLIENT_PORT_EXPOSE}:${HISTORY_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/history/client:/app
    environment:
      - IS_DEV=true

  service_history_db:
    restart: unless-stopped
    ports:
      - ${HISTORY_SERVICE_DB_PORT_EXPOSE}:${HISTORY_SERVICE_DB_PORT}
    volumes:
      - ./services/history/db/postgresql.conf:/app/postgresql.conf
      - ./services/history/db/pg_hba.conf:/app/pg_hba.conf

  service_subscription_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${SUBSCRIPTION_SERVICE_CLIENT_PORT_EXPOSE}:${SUBSCRIPTION_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/subscription/client:/app
    environment:
      - IS_DEV=true

  service_subscription_db:
    restart: unless-stopped
    ports:
      - ${SUBSCRIPTION_SERVICE_DB_PORT_EXPOSE}:${SUBSCRIPTION_SERVICE_DB_PORT}
    volumes:
      - ./services/subscription/db/postgresql.conf:/app/postgresql.conf
      - ./services/subscription/db/pg_hba.conf:/app/pg_hba.conf

  service_order_client:
    restart: unless-stopped
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: npm run start:dev
    ports:
      - ${ORDER_SERVICE_CLIENT_PORT_EXPOSE}:${ORDER_SERVICE_CLIENT_PORT}
    volumes:
      - ./services/order/client:/app
    environment:
      - IS_DEV=true

  service_order_db:
    restart: unless-stopped
    ports:
      - ${ORDER_SERVICE_DB_PORT_EXPOSE}:${ORDER_SERVICE_DB_PORT}
    volumes:
      - ./services/order/db/postgresql.conf:/app/postgresql.conf
      - ./services/order/db/pg_hba.conf:/app/pg_hba.conf

  ### UTILS

  translations:
    restart: unless-stopped
    container_name: leprechaun-utils-translations
    extends:
      file: docker-compose.shared.yaml
      service: node
    command: yarn dev
    volumes:
      - ./utils/translations:/app
    environment:
      - LANGS

  mailcatcher:
    container_name: leprechaun-utils-mailcatcher
    image: dockage/mailcatcher:0.9.0
    ports:
      - 1080:1080
